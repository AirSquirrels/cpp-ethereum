defaults:

  update-submodules: &update-submodules
    run:
      name: "Update git submodules"
      command: |
        mkdir ~/build
        git submodule init evmjit hera
        git submodule status test/jsontests | cut -b2-41 > ~/build/tests.commit
        git submodule update

  download-tests: &download-tests
    run:
      name: "Download tests"
      command: |
        TESTS_COMMIT=$(cat tests.commit)
        echo "Tests commit: $TESTS_COMMIT"
        mkdir tests
        cd tests
        curl -sL https://github.com/ethereum/tests/archive/$TESTS_COMMIT.tar.gz | tar -xz --strip-components=1

  environment-info: &environment-info
    run:
      name: "Environment info"
      command: |
        echo CXX: $CXX
        $CXX --version
        $CXX --version > compiler.version

  configure: &configure
    run:
      name: "Configure"
      # Build "out-of-source" to have better coverage report
      # (ninja is using relative paths otherwise).
      working_directory: ~/build
      command: |
        cmake ../project -G "$GENERATOR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCOVERAGE=ON $CMAKE_OPTIONS

  build: &build
    run:
      name: "Build"
      working_directory: ~/build
      command: cmake --build . -- -j $BUILD_PARALLEL_JOBS

  persist-testeth: &persist-testeth
    persist_to_workspace:
      root: ~/build
      paths:
        - test/testeth
        - tests.commit

  attach-testeth: &attach-testeth
    attach_workspace:
      at: "."

  test: &test
    run:
      name: "Test"
      command: |
        if [ $(uname) = Linux ]; then
          export TMPDIR=/dev/shm
        fi
        export ETHEREUM_TEST_PATH=~/project/tests
        test/testeth

  store-eth: &store-eth
    store_artifacts:
      path: ~/build/eth/eth
      destination: eth
    store_artifacts:
      path: ~/build/test/testeth
      destination: testeth

  store-testeth: &store-testeth
    store_artifacts:
      path: ~/build/test/testeth
      destination: testeth

  store-randomcode-seed: &store-randomcode-seed
    store_artifacts:
      path: ~/build/test/randomCodeSeed.txt
      destination: randomCodeSeed.txt

  save-deps-cache: &save-deps-cache
    cache-save:
      name: "Save dependencies cache"
      key: &deps-cache-key deps-2-{{arch}}-{{checksum "compiler.version"}}-{{checksum "cmake/ProjectLibFF.cmake"}}
      paths:
        - build/deps

  restore-deps-cache: &restore-deps-cache
    cache-restore:
      name: "Restore dependencies cache"
      key: *deps-cache-key

  save-ethash-dag: &save-ethash-dag
    cache-save:
      name: "Save Ethash DAG file"
      key: &ethash-dag-key ethash-dag0-{{arch}}
      paths:
        - ~/.ethash/full-R23-0000000000000000

  restore-ethash-dag: &restore-ethash-dag
    cache-restore:
      name: "Restore Ethash DAG file"
      key: *ethash-dag-key

  upload-coverage-data: &upload-coverage-data
    run:
      name: "Upload coverage data"
      command: |
        pwd
        $GCOV --version
        codecov --required --gcov-exec "$GCOV" --gcov-root ~/build

  linux-steps: &linux-steps
    - checkout
    - *update-submodules
    - *environment-info
    - *restore-deps-cache
    - *configure
    - *build
    - *save-deps-cache
    - *store-eth
    - *store-testeth
    - *restore-ethash-dag
    - *test
    - run:
        name: "Test EVM-C Interpreter"
        working_directory: ~/build
        command: |
          ETHEREUM_TEST_PATH=~/project/test/jsontests \
          test/testeth -t GeneralStateTests -- --vm interpreter
    - *save-ethash-dag
    - *upload-coverage-data


version: 2
jobs:

  build-linux-clang5:
    environment:
      - CXX: clang++-5.0
      - CC:  clang-5.0
      - GCOV: llvm-cov-5.0 gcov
      - GENERATOR: Ninja
      - BUILD_PARALLEL_JOBS: 8
      - TEST_PARALLEL_JOBS: 8
    docker:
      - image: ethereum/cpp-build-env
    steps:
      - checkout
      - *update-submodules
      - *environment-info
      - *configure
      - *build
      - *persist-testeth

  test-linux-clang5:
    docker:
      - image: ethereum/cpp-build-env
    steps:
      - *attach-testeth
      - *download-tests
      - *test


workflows:
  version: 2
  cpp-ethereum:
    jobs:
      - build-linux-clang5
      - test-linux-clang5:
          requires:
            - build-linux-clang5
